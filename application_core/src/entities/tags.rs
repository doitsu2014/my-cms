//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tags")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub slug: String,
    pub created_by: String,
    pub created_at: DateTimeWithTimeZone,
    pub last_modified_by: Option<String>,
    pub last_modified_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::category_tags::Entity")]
    CategoryTags,
    #[sea_orm(has_many = "super::post_tags::Entity")]
    PostTags,
}

impl Related<super::category_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategoryTags.def()
    }
}

impl Related<super::post_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostTags.def()
    }
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        super::category_tags::Relation::Categories.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::category_tags::Relation::Tags.def().rev())
    }
}

impl Related<super::posts::Entity> for Entity {
    fn to() -> RelationDef {
        super::post_tags::Relation::Posts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::post_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::category_tags::Entity")]
    CategoryTags,
    #[sea_orm(entity = "super::post_tags::Entity")]
    PostTags,
    #[sea_orm(entity = "super::categories::Entity")]
    Categories,
    #[sea_orm(entity = "super::posts::Entity")]
    Posts,
}
